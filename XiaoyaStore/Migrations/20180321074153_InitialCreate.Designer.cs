// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using XiaoyaStore.Data;

namespace XiaoyaStore.Migrations
{
    [DbContext(typeof(XiaoyaSearchContext))]
    [Migration("20180321074153_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("XiaoyaStore.Data.Model.IndexStat", b =>
                {
                    b.Property<int>("IndexStatId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Count");

                    b.Property<string>("Word");

                    b.HasKey("IndexStatId");

                    b.HasIndex("Word")
                        .IsUnique();

                    b.ToTable("IndexStats");
                });

            modelBuilder.Entity("XiaoyaStore.Data.Model.InvertedIndex", b =>
                {
                    b.Property<int>("InvertedIndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Position");

                    b.Property<int>("UrlFileId");

                    b.Property<string>("Word");

                    b.HasKey("InvertedIndexId");

                    b.HasIndex("Word");

                    b.HasIndex("UrlFileId", "Position");

                    b.ToTable("InvertedIndices");
                });

            modelBuilder.Entity("XiaoyaStore.Data.Model.UrlFile", b =>
                {
                    b.Property<int>("UrlFileId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Charset")
                        .IsConcurrencyToken();

                    b.Property<string>("Content")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("FileHash")
                        .IsConcurrencyToken();

                    b.Property<string>("FilePath")
                        .IsConcurrencyToken();

                    b.Property<bool>("IsIndexed")
                        .IsConcurrencyToken();

                    b.Property<string>("MimeType")
                        .IsConcurrencyToken();

                    b.Property<TimeSpan>("UpdateInterval")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken();

                    b.Property<string>("Url");

                    b.HasKey("UrlFileId");

                    b.HasIndex("FilePath")
                        .IsUnique();

                    b.HasIndex("UpdatedAt")
                        .IsUnique();

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("UrlFiles");
                });

            modelBuilder.Entity("XiaoyaStore.Data.Model.UrlFrontierItem", b =>
                {
                    b.Property<int>("UrlFrontierItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FailedTimes")
                        .IsConcurrencyToken();

                    b.Property<bool>("IsPopped")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("PlannedTime")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken();

                    b.Property<string>("Url")
                        .IsConcurrencyToken();

                    b.HasKey("UrlFrontierItemId");

                    b.HasIndex("IsPopped");

                    b.HasIndex("PlannedTime");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("UrlFrontierItems");
                });
#pragma warning restore 612, 618
        }
    }
}
